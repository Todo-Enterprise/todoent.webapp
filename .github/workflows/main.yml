# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request 
# events but only for the master branch
on:
  push:
    branches: 
      - master
    tags:        
      - v*
  pull_request:
    branches: 
      - master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: ubuntu-18.04
    env:
      REGISTRY_URL: ${{ secrets.registry_url }}
      REGISTRY_USER: ${{ secrets.registry_user }}
      REGISTRY_PASSWORD: ${{ secrets.registry_password }}

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Build the Docker image
      run: docker build -t $REGISTRY_URL/todoent:$(date +%s) -t $REGISTRY_URL/todoent:latest .

    - name: Upload image to the registry
      run: |
        echo $REGISTRY_PASSWORD | docker login -u $REGISTRY_USER --password-stdin $REGISTRY_URL
        docker push $REGISTRY_URL/todoent
        docker logout $REGISTRY_URL

  deploy:
    runs-on: ubuntu-18.04
    env:
      REGISTRY_URL: ${{ secrets.registry_url }}
      SSH_PRIVATE_KEY: ${{ secrets.ssh_private_key }}
      SSH_USER: ${{ secrets.ssh_user }}
      SSH_URL: ${{ secrets.ssh_url }}
      SSH_APP_PATH: ${{ secrets.ssh_app_path }}

    steps:
    # Runs a set of commands using the runners shell
    - name: Run application on server
      run: |
        # Setup SSH deploy keys
        apt-get update -qq
        apt-get install -qq git
        'which ssh-agent || ( apt-get install -qq openssh-client )'
        eval $(ssh-agent -s)
        ssh-add <(echo "$SSH_PRIVATE_KEY")
        mkdir -p ~/.ssh
        '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
        ssh $SSH_USER@$SSH_URL
        docker pull $REGISTRY_URL/todoent
        cd $SSH_APP_PATH
        docker-compose up -d
        logout
